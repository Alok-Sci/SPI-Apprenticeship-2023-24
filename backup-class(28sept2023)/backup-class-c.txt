In c, when a header file is included in a program and when it is executed

main function 
----------------
main(){} -> compiler only executes the program inside of main() function
int main(){} (main() return integer value)
void main(){} (main() doesn't return any value)

void == no return type
int == integer return type


variable definition & declaration
----------
int a;
    int -> data type of variable
    a -> variable name
    ; -> statement terminator

    ex: int a;
        int a, int b;
        int a, b;

data types:
    int -> integer data type; stores a number without decimal point (2byte/4byte)
    float -> stores a number with decimal point 
    char -> character data type; stores a single character.

variable initialization 
-------------------------
int a = 10;
    int -> data type
    a -> variable name
    = -> assignment operator (stores the value in the right to the variable in the left)
    10 -> value to assign to a variable 
    ; -> statement terminator

display output in console 
---------------------------
printf("string %d \n", param); 
    printf()  -> a function predefined in "stdio" header file
    "string" -> a string to display
    %d -> format specifier; specifies the format in which the value of 'param' need to be printed.
    \n -> escape sequence; \n is used to redirect the cursor to the next line.
    param -> parameter that printf() function takes

    note: printf() function can have multiple parameters
            arithmetic operations can also be performed inside printf() function.
            variables are written outside the quotes. 

take input from user in console
--------------------------------
scanf("%d", &a);
    scanf() -> a function, predefined in "stdio" header file
    "" -> contains format specifiers to take inputs.
    %d -> format specifier, for taking input from user in console
    &a -> & is also called 'address operator', locates the memory location of the variable 'a' and stores the input value.

    note: "" mustn't contain any whitespace.

arithmetic operators
---------------------
used to perform arithmetic operations.
    + -> operator to add two operands
    - -> operator to subtract two operands
    * -> operator to multiply two operands
    / -> operator to divide two operands
    % -> operator to find the remainder of division of two operands

comparison operators 
---------------------
used to compare the values of two operands or expressions
    == -> equal(returns true, if two operands are equal)
    != -> not equal(returns true, if the two operands are not equal)
    <= -> less than or equal(returns true, if the left operand is less than or equal to the right operand)
    >= -> greater than or equal(returns true, if the left operand is greater than or equal to the right operand)
    <> -> less than or greater than(returns true, if the left operand is less than or greater than right operand)

logical operators
------------------
logical operator checks whether two conditions matches or not 

&& -> and -> returns true if both the conditions are true, if any one codition returns false
|| -> or -> retruns true if one of the two conitions is true, or both are true

conditional statements / decision control
----------------------
1.  if statement:
    syntax:
        if(condition){
            //code
        }

2.  if-else statement
    syntax:
        if(condition){
            //code
        }else{
            //code
        }

3.  if-else if-else statement
    syntax:
        if(condition){
            //code
        }else if(condition){
            //code
        }else{
            //code
        }
4.  ladder if statement
    syntax:
        if(condition){

        }if(condition){

        }
5.  nested if statement
    syntax:
        if(condition){
            if(condition){
                if(condition){
                    //code
                }
            }
        }

6. switch-case statement
    syntax:
        switch(condition){
            case choice_1:
                //code
                break;
            case choice_2:
                //code
                break;
            default:
                //code
        }


